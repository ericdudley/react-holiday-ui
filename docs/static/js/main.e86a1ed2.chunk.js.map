{"version":3,"sources":["../../src/util/local-storage.ts","../../src/components/ToggleButton/index.tsx","../../src/util/style.ts","../../src/holidays/Christmas/Snowflakes/Flake.ts","../../src/util/ValueRef.ts","../../src/holidays/Christmas/Snowflakes/Flakes.ts","../../src/holidays/Christmas/Snowflakes/index.tsx","../../src/holidays/Christmas/Snowman/index.tsx","../../src/util/images.ts","../../src/holidays/Christmas/index.tsx","App.tsx","index.tsx"],"names":["key","localStoreEventTarget","constructor","send","event","CustomEvent","detail","value","this","LocalStorageKeys","ALL","useLocalStorageState","useState","hasReadInitialValue","useRef","setValue","newValue","valueToStore","JSON","window","_setValue","error","console","useEffect","handler","item","parsedValue","returnedValue","ToggleButton","props","className","classes","style","onClick","setIsActive","isActive","fixedBottomRight","options","bottom","right","pointerEvents","position","zIndex","Flake","x","y","vx","vy","size","windRef","draw","ctx","Math","step","xMax","ValueRef","Flakes","_ctx","addRandom","removeOutOfBounds","newFlakes","flake","drawAll","stepAll","count","_flakes","Snowflakes","canvasRef","canvas","onResize","flakes","addFlakeInterval","setInterval","stepInterval","requestAnimationFrame","clearInterval","ref","top","left","Snowman","src","alt","Christmas","React","CustomToggle","toggleIsActive","useReactHolidayUI","htmlFor","id","type","checked","onChange","App","width","height","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.e86a1ed2.chunk.js","sourcesContent":["import { useEffect, useRef, useState } from \"react\";\r\n\r\nconst prefixKey = (key: string) => `react-holiday-ui-${key}`;\r\n\r\nclass LocalStorageEventTarget extends EventTarget {\r\n    constructor() {\r\n        super();\r\n    }\r\n\r\n    public send(key: string, value: any) {\r\n        const event = new CustomEvent(\"localstorage\", { detail: { key, value } });\r\n        this.dispatchEvent(event);\r\n    }\r\n\r\n}\r\nconst localStoreEventTarget = new LocalStorageEventTarget();\r\n\r\nexport const LocalStorageKeys = {\r\n    ALL: prefixKey('all'),\r\n}\r\n\r\nexport const useLocalStorageState = <U extends any>(key: string, initialValue: any): [U | undefined, (newValue: U) => void] => {\r\n    const [value, _setValue] = useState<U>();\r\n    const hasReadInitialValue = useRef(false);\r\n\r\n    const setValue = (newValue: any) => {\r\n        try {\r\n            const valueToStore =\r\n                typeof newValue === \"object\" ? JSON.stringify(newValue) : newValue;\r\n            window.localStorage.setItem(key, valueToStore);\r\n            localStoreEventTarget.send(key, valueToStore);\r\n            _setValue(newValue);\r\n        } catch (error) {\r\n            console.error(\"react-holiday-ui: \", error);\r\n        }\r\n    };\r\n\r\n    // Subscribe to local storage changes\r\n    useEffect(() => {\r\n        const handler = (event: CustomEvent) => {\r\n            if (event.detail.key === key && event.detail.value != null) {\r\n                _setValue(event.detail.value);\r\n            }\r\n        }\r\n        localStoreEventTarget.addEventListener('localstorage', handler);\r\n\r\n        return () => {\r\n            localStoreEventTarget.removeEventListener('localstorage', handler);\r\n        }\r\n    }, []);\r\n\r\n    if (!hasReadInitialValue.current) {\r\n        const item = window.localStorage.getItem(key);\r\n        const parsedValue = item ? JSON.parse(item) : undefined;\r\n        const returnedValue = parsedValue != null ? parsedValue : initialValue;\r\n        hasReadInitialValue.current = true;\r\n        setValue(returnedValue);\r\n        return [returnedValue, setValue];\r\n    }\r\n\r\n    return [value, setValue];\r\n}\r\n\r\nexport const useReactHolidayUI = () => {\r\n    const [isActive, setIsActive] = useLocalStorageState<boolean>(LocalStorageKeys.ALL, true);\r\n\r\n    return {\r\n        isActive,\r\n        setIsActive,\r\n        toggleIsActive: () => setIsActive(!isActive),\r\n    };\r\n}","import React, { FunctionComponent } from \"react\";\r\nimport { LocalStorageKeys, useLocalStorageState } from \"../../util/local-storage\";\r\nimport classes from './styles.css';\r\n\r\ninterface ToggleButtonProps {\r\n    style?: React.CSSProperties;\r\n    className?: string;\r\n}\r\n\r\nexport const ToggleButton: FunctionComponent<ToggleButtonProps> = (props) => {\r\n    const [isActive, setIsActive] = useLocalStorageState<boolean>(LocalStorageKeys.ALL, true);\r\n\r\n\r\n    return (\r\n        <button className={`${classes.button} ${props.className}`} style={props.style} onClick={() => setIsActive(!isActive)}>\r\n            {isActive ? \"On\" : \"Off\"}\r\n        </button>\r\n    );\r\n};","import React from \"react\"\r\n\r\nexport const fixedFullscreen = (): React.CSSProperties => ({\r\n    position: 'fixed',\r\n    top: 0,\r\n    left: 0,\r\n    pointerEvents: 'none',\r\n    zIndex: 1000,\r\n})\r\n\r\nexport const fixedBottomRight = (options = { bottom: 0, right: 0, pointerEvents: false }): React.CSSProperties => ({\r\n    position: 'fixed',\r\n    bottom: options.bottom,\r\n    right: options.right,\r\n    pointerEvents: options.pointerEvents ? undefined : 'none',\r\n    zIndex: 1000,\r\n})","import { ValueRef } from \"../../../util/ValueRef\";\r\n\r\nconst MIN_FLAKE_SIZE = 2;\r\nconst MAX_FLAKE_SIZE = 5;\r\nconst MIN_VX = -0.25;\r\nconst MAX_VX = 0.25;\r\nconst MIN_VY = 1.5;\r\nconst MAX_VY = 2.5;\r\nconst FILL_COLOR = '#A0E3F6'\r\nconst MIN_RANDOM_FACTOR = 0.9;\r\nconst MAX_RANDOM_FACTOR = 1.1;\r\n\r\n/**\r\n * Represents a snowflake particle that falls from the top of the screen with some random render offset to seem more natural.\r\n * x, y, xy, and vy make the flake fall in a straight line at a constant velocity.\r\n * offsetX, offsetY, and theta control a render offset from the actual x, y position of the flake.\r\n * \r\n */\r\nexport class Flake {\r\n    // Particle position + velocity\r\n    public x: number;\r\n    public y: number;\r\n    public vx: number;\r\n    public vy: number;\r\n    public parallaxRatio: number;\r\n\r\n    // Particle render offset\r\n    public offsetX: number;\r\n    public offsetY: number;\r\n    public theta: number;\r\n    // Random values close to 1.0 that make each flake's render offset function slightly different\r\n    public xRandom: number;\r\n    public yRandom: number;\r\n\r\n    // Render properties\r\n    public size: number;\r\n\r\n    // Ref \r\n    public windRef: ValueRef<number>;\r\n\r\n    constructor(x: number, y: number, vx: number, vy: number, size: number, windRef: ValueRef<number>) {\r\n        this.x = x;\r\n        this.y = y;\r\n        this.vx = vx;\r\n        this.vy = vy;\r\n        this.parallaxRatio = (0.5 + 0.5 * ((size - MIN_FLAKE_SIZE) / (MAX_FLAKE_SIZE - MIN_FLAKE_SIZE)));\r\n\r\n        this.offsetX = 0;\r\n        this.offsetY = 0;\r\n        this.theta = 0;\r\n        this.xRandom = MIN_RANDOM_FACTOR + Math.random() * (MAX_RANDOM_FACTOR - MIN_RANDOM_FACTOR);\r\n        this.yRandom = MIN_RANDOM_FACTOR + Math.random() * (MAX_RANDOM_FACTOR - MIN_RANDOM_FACTOR);\r\n\r\n        this.size = size;\r\n\r\n        this.windRef = windRef;\r\n    }\r\n\r\n    public draw = (ctx: CanvasRenderingContext2D): void => {\r\n        ctx.beginPath();\r\n        ctx.arc(this.x + this.offsetX, this.y + this.offsetY, this.size, 0, 2 * Math.PI, false);\r\n        ctx.fillStyle = FILL_COLOR;\r\n        ctx.globalAlpha = 0.5;\r\n        ctx.fill();\r\n        ctx.closePath();\r\n    }\r\n\r\n    public step = (): void => {\r\n        this.theta += 0.1;\r\n        this.x += this.parallaxRatio * (this.vx + (this.windRef.value || 0));\r\n        this.y += this.parallaxRatio * this.vy;\r\n        this.offsetX = (this.xRandom * 2) * Math.pow(Math.sin((this.xRandom * 0.25) * this.theta) + Math.sin(this.theta), 3);\r\n        this.offsetY = (this.yRandom * 25) * Math.pow(Math.sin((this.yRandom * 0.1) * this.theta), 4);\r\n    }\r\n\r\n    public static withinBounds = (xMin: number, xMax: number, windRef: ValueRef<number>): Flake => {\r\n        const x = Math.random() * (xMax - xMin) + xMin;\r\n        const y = 0;\r\n        const size = Math.random() * (MAX_FLAKE_SIZE - MIN_FLAKE_SIZE) + MIN_FLAKE_SIZE;\r\n        const vx = Math.random() * (MAX_VX - MIN_VX) + MIN_VX;\r\n        const vy = Math.random() * (MAX_VY - MIN_VY) + MIN_VY;\r\n        return new Flake(x, y, vx, vy, size, windRef);\r\n    }\r\n}","export class ValueRef<T> {\r\n    public value: T;\r\n\r\n    constructor(value: T) {\r\n        this.value = value;\r\n    }\r\n}","import { Flake } from \"./Flake\";\r\nimport { ValueRef } from \"../../../util/ValueRef\";\r\n\r\nconst MAX_FLAKES_COUNT = 200;\r\n\r\n\r\n/**\r\n * Class that manages a list of flakes to be updated and drawn.\r\n */\r\nexport class Flakes {\r\n    private _flakes: Flake[];\r\n    private _ctx: CanvasRenderingContext2D;\r\n\r\n    // Global wind that affects all flakes.\r\n    private _wind: ValueRef<number>;\r\n    private _windTheta: number;\r\n\r\n    constructor(_ctx: CanvasRenderingContext2D) {\r\n        this._flakes = [];\r\n        this._wind = new ValueRef<number>(0);\r\n        this._windTheta = 0;\r\n        this._ctx = _ctx;\r\n    }\r\n\r\n    /**\r\n     * The number of active flakes.\r\n     */\r\n    public get count(): number {\r\n        return this._flakes.length;\r\n    }\r\n\r\n    /**\r\n     * Adds a new flake within the given x bounds.\r\n     */\r\n    public addRandom = (): void => {\r\n        if (this._flakes.length < MAX_FLAKES_COUNT) {\r\n            this._flakes.push(Flake.withinBounds(0, this._ctx.canvas.width, this._wind));\r\n        }\r\n        this.removeOutOfBounds();\r\n    }\r\n\r\n    /**\r\n     * Removes flakes with (x, y) position outside of ([0, maxX], [0, maxY])\r\n     */\r\n    public removeOutOfBounds = (): void => {\r\n        const newFlakes = this._flakes.filter(flake => flake.x >= 0 && flake.x <= this._ctx.canvas.width && flake.y >= 0 && flake.y <= this._ctx.canvas.height);\r\n        this._flakes = newFlakes;\r\n    }\r\n\r\n    /**\r\n     * Draws all flakes.\r\n     */\r\n    public drawAll = (): void => {\r\n        this._flakes.forEach(flake => flake.draw(this._ctx));\r\n    }\r\n\r\n    /**\r\n     * Steps all flakes.\r\n     */\r\n    public stepAll = (): void => {\r\n        // Update wind strength.\r\n        this._windTheta += 0.01;\r\n        this._wind.value = Math.abs(2 * Math.pow(Math.sin(this._windTheta), 10));\r\n\r\n        this._flakes.forEach(flake => flake.step());\r\n    }\r\n}","import React, { FunctionComponent, useEffect, useRef } from 'react';\r\nimport { fixedFullscreen } from '../../../util/style';\r\nimport { Flakes } from './Flakes';\r\nconst STEP_DURATION_MS = 50;\r\nconst ADD_FLAKE_INTERVAL_MS = 500;\r\n\r\n\r\n/**\r\n * Renders gently falling snowflakes represented by light blue circles that start at the top of the screen and fall to the bottom.\r\n */\r\nexport const Snowflakes: FunctionComponent = () => {\r\n    const canvasRef = useRef<HTMLCanvasElement>(null);\r\n\r\n    // Set up snowflakes effect\r\n    useEffect(() => {\r\n        const canvas = canvasRef.current;\r\n        if (!canvas) {\r\n            return;\r\n        }\r\n\r\n        const ctx = canvas.getContext('2d');\r\n        if (!ctx) {\r\n            return;\r\n        }\r\n\r\n        const onResize = () => {\r\n            canvas.width = window.innerWidth;\r\n            canvas.height = window.innerHeight;\r\n        }\r\n        window.addEventListener('resize', onResize);\r\n\r\n\r\n\r\n        const flakes = new Flakes(ctx);\r\n        canvas.width = window.innerWidth;\r\n        canvas.height = window.innerHeight;\r\n\r\n        const addFlakeInterval = setInterval(flakes.addRandom, ADD_FLAKE_INTERVAL_MS);\r\n        const stepInterval = setInterval(flakes.stepAll, STEP_DURATION_MS);\r\n        const draw = () => {\r\n            ctx.clearRect(0, 0, canvasRef.current?.width || 0, canvasRef.current?.height || 0);\r\n            flakes.drawAll();\r\n            requestAnimationFrame(draw);\r\n        }\r\n        draw();\r\n\r\n\r\n        return () => {\r\n            clearInterval(addFlakeInterval);\r\n            clearInterval(stepInterval);\r\n            window.removeEventListener('resize', onResize);\r\n        }\r\n    }, []);\r\n\r\n\r\n    return <canvas ref={canvasRef} style={fixedFullscreen()}></ canvas >\r\n};","import React, { FunctionComponent } from \"react\";\r\nimport { SNOWMAN_IMAGE_SRC } from \"../../../util/images\";\r\nimport { fixedBottomRight } from '../../../util/style';\r\nimport classes from './styles.css';\r\n\r\nexport const Snowman: FunctionComponent = () => {\r\n    return <div style={fixedBottomRight()}>\r\n        <img className={classes[\"snowman-img\"]} src={SNOWMAN_IMAGE_SRC} alt=\"snowman\" />\r\n    </div>;\r\n};","export const SNOWMAN_IMAGE_SRC = 'https://react-holiday-ui.s3.amazonaws.com/snowman.png';","import React, { Fragment, FunctionComponent } from \"react\";\r\nimport { LocalStorageKeys, useLocalStorageState } from \"../../util/local-storage\";\r\nimport { Snowflakes } from \"./Snowflakes\";\r\nimport { Snowman } from \"./Snowman\";\r\n\r\nexport const Christmas: FunctionComponent = () => {\r\n    const [isActive] = useLocalStorageState<boolean>(LocalStorageKeys.ALL, true);\r\n\r\n    return (\r\n        <div>\r\n            {isActive && (\r\n                <Fragment>\r\n                    <Snowflakes />\r\n                    <Snowman />\r\n                </Fragment>\r\n            )}\r\n        </div>\r\n    );\r\n};","import React from 'react'\n\nimport { Christmas, ToggleButton, useReactHolidayUI } from 'react-holiday-ui'\nimport 'react-holiday-ui/dist/index.css';\n\nconst CustomToggle = () => {\n  const { isActive, toggleIsActive } = useReactHolidayUI();\n  return <div>\n    <label htmlFor=\"react-holiday-ui-checkbox\">Holiday UI</label>\n    <input id=\"react-holiday-ui-checkbox\" type=\"checkbox\" checked={isActive} onChange={toggleIsActive} /></div >;\n}\n\nconst App = () => {\n\n  return <div className=\"app\">\n    <div className=\"demo-section\">\n      <h2>Default ToggleButton</h2>\n      <ToggleButton style={{ width: '32px', height: '32px' }} />\n    </div>\n    <div className='demo-section'>\n      <h2>Custom Toggle</h2>\n      <CustomToggle />\n    </div>\n    <Christmas />\n  </div>;\n}\n\nexport default App\n","import './index.css'\n\nimport React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\n\nReactDOM.render(<App />, document.getElementById('root'))\n"],"sourceRoot":""}