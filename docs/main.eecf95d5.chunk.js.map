{"version":3,"sources":["../../src/util/style.ts","../../src/holidays/Christmas/Snowflakes/Flake.ts","../../src/util/ValueRef.ts","../../src/holidays/Christmas/Snowflakes/Flakes.ts","../../src/holidays/Christmas/Snowflakes/index.tsx","../../src/holidays/Christmas/Snowman/index.tsx","../../src/util/images.ts","../../src/components/ToggleButton/index.tsx","../../src/holidays/Christmas/index.tsx","App.tsx","index.tsx"],"names":["fixedBottomRight","options","bottom","right","pointerEvents","position","zIndex","Flake","constructor","x","y","vx","vy","size","windRef","draw","ctx","Math","step","this","xMax","ValueRef","value","Flakes","_ctx","addRandom","removeOutOfBounds","newFlakes","flake","drawAll","stepAll","console","count","_flakes","Snowflakes","canvasRef","useRef","useEffect","canvas","onResize","window","flakes","addFlakeInterval","setInterval","stepInterval","requestAnimationFrame","clearInterval","ref","style","top","left","Snowman","className","classes","src","alt","ToggleButton","props","onClick","Christmas","useState","isActive","React","setIsActive","prev","App","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.eecf95d5.chunk.js","sourcesContent":["import React from \"react\"\r\n\r\nexport const fixedFullscreen = (): React.CSSProperties => ({\r\n    position: 'fixed',\r\n    top: 0,\r\n    left: 0,\r\n    pointerEvents: 'none',\r\n    zIndex: 1000,\r\n})\r\n\r\nexport const fixedBottomRight = (options = { bottom: 0, right: 0, pointerEvents: false }): React.CSSProperties => ({\r\n    position: 'fixed',\r\n    bottom: options.bottom,\r\n    right: options.right,\r\n    pointerEvents: options.pointerEvents ? undefined : 'none',\r\n    zIndex: 1000,\r\n})","import { ValueRef } from \"../../../util/ValueRef\";\r\n\r\nconst MIN_FLAKE_SIZE = 2;\r\nconst MAX_FLAKE_SIZE = 5;\r\nconst MIN_VX = -0.25;\r\nconst MAX_VX = 0.25;\r\nconst MIN_VY = 1.5;\r\nconst MAX_VY = 2.5;\r\nconst FILL_COLOR = '#A0E3F6'\r\nconst MIN_RANDOM_FACTOR = 0.9;\r\nconst MAX_RANDOM_FACTOR = 1.1;\r\n\r\n/**\r\n * Represents a snowflake particle that falls from the top of the screen with some random render offset to seem more natural.\r\n * x, y, xy, and vy make the flake fall in a straight line at a constant velocity.\r\n * offsetX, offsetY, and theta control a render offset from the actual x, y position of the flake.\r\n * \r\n */\r\nexport class Flake {\r\n    // Particle position + velocity\r\n    public x: number;\r\n    public y: number;\r\n    public vx: number;\r\n    public vy: number;\r\n    public parallaxRatio: number;\r\n\r\n    // Particle render offset\r\n    public offsetX: number;\r\n    public offsetY: number;\r\n    public theta: number;\r\n    // Random values close to 1.0 that make each flake's render offset function slightly different\r\n    public xRandom: number;\r\n    public yRandom: number;\r\n\r\n    // Render properties\r\n    public size: number;\r\n\r\n    // Ref \r\n    public windRef: ValueRef<number>;\r\n\r\n    constructor(x: number, y: number, vx: number, vy: number, size: number, windRef: ValueRef<number>) {\r\n        this.x = x;\r\n        this.y = y;\r\n        this.vx = vx;\r\n        this.vy = vy;\r\n        this.parallaxRatio = (0.5 + 0.5 * ((size - MIN_FLAKE_SIZE) / (MAX_FLAKE_SIZE - MIN_FLAKE_SIZE)));\r\n\r\n        this.offsetX = 0;\r\n        this.offsetY = 0;\r\n        this.theta = 0;\r\n        this.xRandom = MIN_RANDOM_FACTOR + Math.random() * (MAX_RANDOM_FACTOR - MIN_RANDOM_FACTOR);\r\n        this.yRandom = MIN_RANDOM_FACTOR + Math.random() * (MAX_RANDOM_FACTOR - MIN_RANDOM_FACTOR);\r\n\r\n        this.size = size;\r\n\r\n        this.windRef = windRef;\r\n    }\r\n\r\n    public draw = (ctx: CanvasRenderingContext2D): void => {\r\n        ctx.beginPath();\r\n        ctx.arc(this.x + this.offsetX, this.y + this.offsetY, this.size, 0, 2 * Math.PI, false);\r\n        ctx.fillStyle = FILL_COLOR;\r\n        ctx.globalAlpha = 0.5;\r\n        ctx.fill();\r\n        ctx.closePath();\r\n    }\r\n\r\n    public step = (): void => {\r\n        this.theta += 0.1;\r\n        this.x += this.parallaxRatio * (this.vx + (this.windRef.value || 0));\r\n        this.y += this.parallaxRatio * this.vy;\r\n        this.offsetX = (this.xRandom * 2) * Math.pow(Math.sin((this.xRandom * 0.25) * this.theta) + Math.sin(this.theta), 3);\r\n        this.offsetY = (this.yRandom * 25) * Math.pow(Math.sin((this.yRandom * 0.1) * this.theta), 4);\r\n    }\r\n\r\n    public static withinBounds = (xMin: number, xMax: number, windRef: ValueRef<number>): Flake => {\r\n        const x = Math.random() * (xMax - xMin) + xMin;\r\n        const y = 0;\r\n        const size = Math.random() * (MAX_FLAKE_SIZE - MIN_FLAKE_SIZE) + MIN_FLAKE_SIZE;\r\n        const vx = Math.random() * (MAX_VX - MIN_VX) + MIN_VX;\r\n        const vy = Math.random() * (MAX_VY - MIN_VY) + MIN_VY;\r\n        return new Flake(x, y, vx, vy, size, windRef);\r\n    }\r\n}","export class ValueRef<T> {\r\n    public value: T;\r\n\r\n    constructor(value: T) {\r\n        this.value = value;\r\n    }\r\n}","import { Flake } from \"./Flake\";\r\nimport { ValueRef } from \"../../../util/ValueRef\";\r\n\r\nconst MAX_FLAKES_COUNT = 200;\r\n\r\n\r\n/**\r\n * Class that manages a list of flakes to be updated and drawn.\r\n */\r\nexport class Flakes {\r\n    private _flakes: Flake[];\r\n    private _ctx: CanvasRenderingContext2D;\r\n\r\n    // Global wind that affects all flakes.\r\n    private _wind: ValueRef<number>;\r\n    private _windTheta: number;\r\n\r\n    constructor(_ctx: CanvasRenderingContext2D) {\r\n        this._flakes = [];\r\n        this._wind = new ValueRef<number>(0);\r\n        this._ctx = _ctx;\r\n    }\r\n\r\n    /**\r\n     * The number of active flakes.\r\n     */\r\n    public get count(): number {\r\n        return this._flakes.length;\r\n    }\r\n\r\n    /**\r\n     * Adds a new flake within the given x bounds.\r\n     */\r\n    public addRandom = (): void => {\r\n        if (this._flakes.length < MAX_FLAKES_COUNT) {\r\n            this._flakes.push(Flake.withinBounds(0, this._ctx.canvas.width, this._wind));\r\n        }\r\n        this.removeOutOfBounds();\r\n    }\r\n\r\n    /**\r\n     * Removes flakes with (x, y) position outside of ([0, maxX], [0, maxY])\r\n     */\r\n    public removeOutOfBounds = (): void => {\r\n        const newFlakes = this._flakes.filter(flake => flake.x >= 0 && flake.x <= this._ctx.canvas.width && flake.y >= 0 && flake.y <= this._ctx.canvas.height);\r\n        this._flakes = newFlakes;\r\n    }\r\n\r\n    /**\r\n     * Draws all flakes.\r\n     */\r\n    public drawAll = (): void => {\r\n        this._flakes.forEach(flake => flake.draw(this._ctx));\r\n    }\r\n\r\n    /**\r\n     * Steps all flakes.\r\n     */\r\n    public stepAll = (): void => {\r\n        console.dir(this)\r\n        // Update wind strength.\r\n        this._windTheta += 0.01;\r\n        this._wind.value = Math.abs(2 * Math.pow(Math.sin(this._windTheta), 10));\r\n\r\n        this._flakes.forEach(flake => flake.step());\r\n    }\r\n}","import React, { FunctionComponent, useEffect, useRef } from 'react';\r\nimport { fixedFullscreen } from '../../../util/style';\r\nimport { Flakes } from './Flakes';\r\nconst STEP_DURATION_MS = 50;\r\nconst ADD_FLAKE_INTERVAL_MS = 500;\r\n\r\n\r\n/**\r\n * Renders gently falling snowflakes represented by light blue circles that start at the top of the screen and fall to the bottom.\r\n */\r\nexport const Snowflakes: FunctionComponent = () => {\r\n    const canvasRef = useRef<HTMLCanvasElement>(null);\r\n\r\n    // Set up snowflakes effect\r\n    useEffect(() => {\r\n        const canvas = canvasRef.current;\r\n        if (!canvas) {\r\n            return;\r\n        }\r\n\r\n        const ctx = canvas.getContext('2d');\r\n        if (!ctx) {\r\n            return;\r\n        }\r\n\r\n        const onResize = () => {\r\n            canvas.width = window.innerWidth;\r\n            canvas.height = window.innerHeight;\r\n        }\r\n        window.addEventListener('resize', onResize);\r\n\r\n\r\n\r\n        const flakes = new Flakes(ctx);\r\n        canvas.width = window.innerWidth;\r\n        canvas.height = window.innerHeight;\r\n\r\n        const addFlakeInterval = setInterval(flakes.addRandom, ADD_FLAKE_INTERVAL_MS);\r\n        const stepInterval = setInterval(flakes.stepAll, STEP_DURATION_MS);\r\n        const draw = () => {\r\n            ctx.clearRect(0, 0, canvasRef.current?.width || 0, canvasRef.current?.height || 0);\r\n            flakes.drawAll();\r\n            requestAnimationFrame(draw);\r\n        }\r\n        draw();\r\n\r\n\r\n        return () => {\r\n            clearInterval(addFlakeInterval);\r\n            clearInterval(stepInterval);\r\n            window.removeEventListener('resize', onResize);\r\n        }\r\n    }, []);\r\n\r\n\r\n    return <canvas ref={canvasRef} style={fixedFullscreen()}></ canvas >\r\n};","import React, { FunctionComponent } from \"react\";\r\nimport { SNOWMAN_IMAGE_SRC } from \"../../../util/images\";\r\nimport { fixedBottomRight } from '../../../util/style';\r\nimport classes from './styles.css';\r\n\r\nexport const Snowman: FunctionComponent = () => {\r\n    return <div style={fixedBottomRight()}>\r\n        <img className={classes[\"snowman-img\"]} src={SNOWMAN_IMAGE_SRC} alt=\"snowman\" />\r\n    </div>;\r\n};","export const SNOWMAN_IMAGE_SRC = 'https://react-holiday-ui.s3.amazonaws.com/snowman.png';","import React, { FunctionComponent } from \"react\";\r\nimport classes from './styles.css';\r\n\r\ninterface ToggleButtonProps {\r\n    onClick: () => void;\r\n    isActive: boolean;\r\n    style?: React.CSSProperties;\r\n}\r\n\r\nexport const ToggleButton: FunctionComponent<ToggleButtonProps> = (props) => {\r\n    return (\r\n        <button className={classes.button} style={props.style} onClick={props.onClick}>\r\n            {props.isActive ? \"On\" : \"Off\"}\r\n        </button>\r\n    );\r\n};","import React, { Fragment, FunctionComponent, useState } from \"react\";\r\nimport { ToggleButton } from \"../../components/ToggleButton\";\r\nimport { fixedBottomRight } from \"../../util/style\";\r\nimport { Snowflakes } from \"./Snowflakes\";\r\nimport { Snowman } from \"./Snowman\";\r\n\r\nexport const Christmas: FunctionComponent = () => {\r\n    const [isActive, setIsActive] = useState(true);\r\n\r\n    const toggleIsActive = () => {\r\n        setIsActive((prev) => !prev);\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            {isActive && (\r\n                <Fragment>\r\n                    <Snowflakes />\r\n                    <Snowman />\r\n                </Fragment>\r\n            )}\r\n            <ToggleButton style={fixedBottomRight({ bottom: 8, right: 8, pointerEvents: true })} isActive={isActive} onClick={toggleIsActive} />\r\n        </div>\r\n    );\r\n};","import React from 'react'\n\nimport { Christmas } from 'react-holiday-ui'\nimport 'react-holiday-ui/dist/index.css'\n\nconst App = () => {\n  return <div><Christmas /></div>;\n}\n\nexport default App\n","import './index.css'\n\nimport React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\n\nReactDOM.render(<App />, document.getElementById('root'))\n"],"sourceRoot":""}